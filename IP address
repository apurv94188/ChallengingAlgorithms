  class Solution {
  public:
      
      vector<string> restoreIpAddresses(string s, int chunk) {
          
         if (chunk==1) {
             if (s!="" && stoi(s) < 256 && to_string(stoi(s)) == s)
                return {s};
             else
                return {};
         }
          
         int minFrwd = (chunk-1);
         int maxFrwd = (chunk-1)*3;
         int len = s.length();
         
         vector<string> ips;
         vector<string> subips;
         vector<string>::iterator itr;
          
         if (len-1 <= maxFrwd) {
             subips = restoreIpAddresses(s.substr(1), chunk-1);
             for (itr=subips.begin(); itr!=subips.end(); ++itr) {
                 ips.push_back(s.substr(0,1) + "." + *itr);
             }
         }
         if (len-2 >= minFrwd && len-2 <= maxFrwd) {
             if(s.substr(0,1) != "0") {
                 subips = restoreIpAddresses(s.substr(2), chunk-1);
                 for (itr=subips.begin(); itr!=subips.end(); ++itr) {
                     ips.push_back(s.substr(0,2) + "." + *itr);
                 }
             }
         }
         if (len-3 >= minFrwd && len-3 <= maxFrwd) {
             if (stoi(s.substr(0,3)) < 256 && s.substr(0,1)!="0") {
                 subips = restoreIpAddresses(s.substr(3), chunk-1);
                 for (itr=subips.begin(); itr!=subips.end(); ++itr) {
                     ips.push_back(s.substr(0,3) + "." + *itr);
                 }
             } // if !256
         }
         
        return ips;
      } // func

      
      vector<string> restoreIpAddresses(string s) {
          
          // len < 4
          if (s.length() < 4)
              return {};
          // len > 12
          if (s.length() > 12)
              return {};
          
          if (s=="0000")
                return {"0.0.0.0"};
            
          return restoreIpAddresses(s, 4);
          
      }
  };
