
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;

    Node() {}

    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};

class Solution {
private:
    unordered_map<Node*, Node*> m_mapNodeMap;
    
public:
    
    Node* cloneGraph(Node* node) {
        
        if (!node)
            return nullptr;
        
        Node *copyNode = new Node();
        copyNode->val = node->val;
        this->m_mapNodeMap.insert(pair<Node*, Node*>(node, copyNode));
        
        for(vector<Node*>::iterator neighbor = node->neighbors.begin(); neighbor != node->neighbors.end();
            ++neighbor) {
            if (this->m_mapNodeMap.find(*neighbor) == this->m_mapNodeMap.end())
                copyNode->neighbors.push_back(cloneGraph(*neighbor));
            else
                copyNode->neighbors.push_back(this->m_mapNodeMap.at(*neighbor));
        }// for loop
        
        return copyNode;
    }
    
};
